# SPDX-FileCopyrightText: Â© 2022 Melg Eight <public.melg8@gmail.com>
#
# SPDX-License-Identifier: MIT

---
APPLY_FIXES: all # all, none, or list of linter keys.

# Example for key: REPOSITORY_GIT_DIFF uncomment to run only that linter.
# ENABLE_LINTERS: [CPP_CLANG_TIDY]

# DEBUG - verbose output of command calls with respective arguments.
# INFO - moderate output with linting statistics.
# ERROR - minimum output only in case of error.
LOG_LEVEL: DEBUG

# Dont check for linters that are not supported by cit but suggested by
# megalinter.
FLAVOR_SUGGESTIONS: false

# List of linters that are supported by cit.
# Copy inside of ENABLE_LINTERS to explicitly run only those linters.
# BASH_BASH_EXEC,
# BASH_SHELLCHECK,
# CMAKE_CMAKE_FORMAT,
# CMAKE_CMAKE_LINT,
# CPP_CLANG_FORMAT_16,
# CPP_CLANG_TIDY,
# CPP_CPPCHECK,
# CPP_CPPLINT,
# GIT_COMMITLINT,
# GIT_CONFORM,
# GIT_GIT_SIZER,
# GIT_GIT_SPELL,
# GIT_WHITESPACE_FORMAT,
# LS_LS_LINT,
# LS_LS_SPELL,
# MARKDOWN_MDL,
# MARKDOWN_REMARK_LINT,
# MARKDOWN_TEXTLINT,
# SPELL_CODESPELL,
# SPELL_CSPELL,
# YAML_PRETTIER,
# YAML_YAMLLINT,
ENABLE_LINTERS: []

# Linters that are not supported by cit right now for various reasons.
DISABLE_LINTERS: [
    # To fix:
    GIT_GIT_LINT, # Needs ruby higher than default in ubuntu.
    # Deprecated section.
    NIX_NIX_LINTER, # Deprecated in favor of pure docker.
    NIX_NIXPKGS_FMT_WRAPPER, # Deprecated in favor of pure docker.
    # Git diff adds false positives if empty lines are near changed line.
    # Deprecated in favor of whitespace-format.
    REPOSITORY_GIT_DIFF,
    # Deprecated section end.
    LICENSE_REUSE,
  ]

# Policies.
FAIL_IF_MISSING_LINTER_IN_FLAVOR: true
FAIL_IF_UPDATED_SOURCES: true
FORMATTERS_DISABLE_ERRORS: false

# Reports style.
SHOW_ELAPSED_TIME: true
FILEIO_REPORTER: false # Enable only if runner has internet connection.
PRINT_ALPACA: false # Don't print logo.

FILTER_REGEX_EXCLUDE: ".*/third_party/.*.hpp"

# GIT_DIFF
REPOSITORY_GIT_DIFF_ARGUMENTS: HEAD^

# GIT_COMMITLINT
GIT_COMMITLINT_ARGUMENTS: --to HEAD

# GIT_SPELL
GIT_GIT_SPELL_CONFIG_FILE: ci/checks/dictionaries/cspell.json

# LS_SPELL
LS_LS_SPELL_CONFIG_FILE: ci/checks/dictionaries/cspell.json

# MARKDOWN_REMARK_LINT
MARKDOWN_DEFAULT_STYLE: "remark-lint"
MARKDOWN_REMARK_LINT_CONFIG_FILE: "rc.yaml"

# MARKDOWN_TEXTLINT
MARKDOWN_TEXTLINT_FILTER_REGEX_EXCLUDE: "license.md"

# BASH_EXEC.
ERROR_ON_MISSING_EXEC_BIT: true

# BASH_SHFMT
BASH_SHFMT_ARGUMENTS: "--indent 2"

# YAML_YAMLLINT.
YAML_YAMLLINT_ARGUMENTS: "-s" # Strict.

# SPELL_CSPELL.
SPELL_CSPELL_CONFIG_FILE: ci/checks/dictionaries/cspell.json
SPELL_CSPELL_FILE_EXTENSIONS: "*"

# NIX_LINTER
NIX_NIX_LINTER_FILTER_REGEX_EXCLUDE: "node-env.nix|node-packages.nix"

# SPELL_CODESPELL.
SPELL_CODESPELL_ARGUMENTS: >
  -D=-
  -D=ci/checks/dictionaries/spelling_corrections.txt
  --skip="sources/example_glassy/third_party/sources"

# WHITESPACE_FORMAT
GIT_WHITESPACE_FORMAT_ARGUMENTS: >
  --exclude ".git/|.idea/|.pyc$/|LICENSES/|docs/images"
  --new-line-marker=auto
  --add-new-line-marker-at-end-of-file
  --normalize-new-line-markers
  --remove-trailing-empty-lines
  --replace-tabs-with-spaces=2
  --remove-trailing-whitespace
  --normalize-empty-files=one-line

# CMAKE_FORMAT
CMAKE_CMAKE_FORMAT_DISABLE_ERRORS: false

# CPP_CPPLINT.
CPP_CPPLINT_ARGUMENTS: >
  --recursive
  --linelength=80
  --includeorder=standardcfirst
  --filter=-build/c++11,-build/header_guard,-runtime/references,-readability/check,-readability/nolint
  --root=./sources

# CPP_CPPCHECK
CPP_CPPCHECK_PRE_COMMANDS:
  - command: >
      rm -rf ./build_gcc/*;
      mkdir -p report/linters_logs/cppcheck_raw;
      ./ci/builders/common/cmake_setup.sh g++ gcc 13;
      cmake -B build_gcc -G Ninja
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_CXX_COMPILER=g++
      -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake";
    cwd: "root"
    continue_if_failed: false

# Absolute paths needed so that CodeChecker doesn't try to search for files
# with relative paths.
CPP_CPPCHECK_POST_COMMANDS:
  - command: >
      find . -name '*.plist' -exec sed -i 's?sources?'`pwd`'/sources?' {} +
    cwd: "root"
    continue_if_failed: false

CPP_CPPCHECK_ARGUMENTS: >
  --cppcheck-build-dir=build_gcc
  --project=build_gcc/compile_commands.json
  --library=./.config/cppcheck/doctest.cfg
  --error-exitcode=1
  --enable=all
  --inline-suppr
  --inconclusive
  --suppress=unusedFunction
  --suppress=unusedStructMember
  --suppress=unmatchedSuppression
  --suppress=missingIncludeSystem
  --plist-output=report/linters_logs/cppcheck_raw

# CLANG_TIDY
CPP_CLANG_TIDY_PRE_COMMANDS:
  - command: >
      rm -rf ./build_clang/*;
      ./ci/builders/common/cmake_setup.sh clang++ clang 16;
      cmake -B build_clang -G Ninja
      -DCMAKE_BUILD_TYPE=Release
      -DCMAKE_CXX_COMPILER=clang++
      -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake";
    cwd: "root"
    continue_if_failed: false

CPP_CLANG_TIDY_ARGUMENTS: >
  -header-filter='^(u(i[^_]|[^i])|[^u])+$'
  -p=build_clang
  -use-color=false

POST_COMMANDS:
  - command: >
      ci/checks/code_checker_reports_convert.sh
    cwd: "root"
    continue_if_failed: false
