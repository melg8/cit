diff --git a/.automation/build.py b/.automation/build.py
index ec901a9..c1963cc 100644
--- a/.automation/build.py
+++ b/.automation/build.py
@@ -2767,7 +2767,7 @@ def generate_documentation_all_linters():
             if linter.linter_megalinter_ref_url not in ["no", "never"]:
                 md_url = f"[MegaLinter reference]({linter.linter_megalinter_ref_url}){{target=_blank}}"
             if linter.linter_megalinter_ref_url == "no":
-                status = "‚ùå Refused"
+                status = "‚õî Refused"
                 md_status = ":no_entry_sign:"
             elif linter.linter_megalinter_ref_url == "never":
                 status = "Œò Not applicable"
diff --git a/.automation/test/csharp/reports/ERROR-CSHARP_DOTNET_FORMAT.txt b/.automation/test/csharp/reports/ERROR-CSHARP_DOTNET_FORMAT.txt
index 3a8bcab..7d370c2 100644
--- a/.automation/test/csharp/reports/ERROR-CSHARP_DOTNET_FORMAT.txt
+++ b/.automation/test/csharp/reports/ERROR-CSHARP_DOTNET_FORMAT.txt
@@ -2,12 +2,12 @@ Results of dotnet-format linter (version 000)
 See documentation on https://megalinter.io/descriptors/csharp_dotnet_format/
 -----------------------------------------------

-‚ùå [ERROR] .automation/test/csharp/csharp_bad_01.cs
+‚õî [ERROR] .automation/test/csharp/csharp_bad_01.cs
     .automation/test/csharp/csharp_bad_01.cs(5,18): error WHITESPACE: Fix whitespace formatting. Replace 1 characters with '\n\s\s\s\s'. [.automation/test/csharp/csharp_project.csproj]
     .automation/test/csharp/csharp_bad_02.cs(7,25): error WHITESPACE: Fix whitespace formatting. Delete 1 characters. [.automation/test/csharp/csharp_project.csproj]
     .automation/test/csharp/csharp_bad_02.cs(9,30): error WHITESPACE: Fix whitespace formatting. Delete 1 characters. [.automation/test/csharp/csharp_project.csproj]

-‚ùå [ERROR] .automation/test/csharp/csharp_bad_02.cs
+‚õî [ERROR] .automation/test/csharp/csharp_bad_02.cs
     .automation/test/csharp/csharp_bad_01.cs(5,18): error WHITESPACE: Fix whitespace formatting. Replace 1 characters with '\n\s\s\s\s'. [.automation/test/csharp/csharp_project.csproj]
     .automation/test/csharp/csharp_bad_02.cs(7,25): error WHITESPACE: Fix whitespace formatting. Delete 1 characters. [.automation/test/csharp/csharp_project.csproj]
     .automation/test/csharp/csharp_bad_02.cs(9,30): error WHITESPACE: Fix whitespace formatting. Delete 1 characters. [.automation/test/csharp/csharp_project.csproj]
diff --git a/.automation/test/spell_lychee/reports/ERROR-SPELL_LYCHEE.txt b/.automation/test/spell_lychee/reports/ERROR-SPELL_LYCHEE.txt
index ee646b7..8ee1d7c 100644
--- a/.automation/test/spell_lychee/reports/ERROR-SPELL_LYCHEE.txt
+++ b/.automation/test/spell_lychee/reports/ERROR-SPELL_LYCHEE.txt
@@ -2,7 +2,7 @@ Results of lychee linter (version 0.0.0)
 See documentation on https://lychee.cli.rs
 -----------------------------------------------

-‚ùå [ERROR] for workspace /github/workspace
+‚õî [ERROR] for workspace /github/workspace
 Linter raw log:
 üìù Summary
 ---------------------
diff --git a/.automation/test/vbdotnet/reports/ERROR-VBDOTNET_DOTNET_FORMAT.txt b/.automation/test/vbdotnet/reports/ERROR-VBDOTNET_DOTNET_FORMAT.txt
index 1fa4ea9..97fb95b 100644
--- a/.automation/test/vbdotnet/reports/ERROR-VBDOTNET_DOTNET_FORMAT.txt
+++ b/.automation/test/vbdotnet/reports/ERROR-VBDOTNET_DOTNET_FORMAT.txt
@@ -2,7 +2,7 @@ Results of dotnet-format linter (version 000)
 See documentation on https://megalinter.io/descriptors/vbdotnet_dotnet_format/
 -----------------------------------------------

-‚ùå [ERROR] .automation/test/vbdotnet/vbdotnet_bad_1.vb
+‚õî [ERROR] .automation/test/vbdotnet/vbdotnet_bad_1.vb
     .automation/test/vbdotnet/vbdotnet_bad_1.vb(4,4): error WHITESPACE: Fix whitespace formatting. Insert '\s'. [.automation/test/vbdotnet/vb_projecty.vbproj]
     .automation/test/vbdotnet/vbdotnet_bad_1.vb(4,20): error WHITESPACE: Fix whitespace formatting. Delete 2 characters. [.automation/test/vbdotnet/vb_projecty.vbproj]
     .automation/test/vbdotnet/vbdotnet_bad_1.vb(5,7): error WHITESPACE: Fix whitespace formatting. Insert '\s\s'. [.automation/test/vbdotnet/vb_projecty.vbproj]
@@ -10,7 +10,7 @@ See documentation on https://megalinter.io/descriptors/vbdotnet_dotnet_format/
     .automation/test/vbdotnet/vbdotnet_bad_2.vb(4,20): error WHITESPACE: Fix whitespace formatting. Delete 2 characters. [.automation/test/vbdotnet/vb_projecty.vbproj]
     .automation/test/vbdotnet/vbdotnet_bad_2.vb(5,7): error WHITESPACE: Fix whitespace formatting. Insert '\s\s'. [.automation/test/vbdotnet/vb_projecty.vbproj]

-‚ùå [ERROR] .automation/test/vbdotnet/vbdotnet_bad_2.vb
+‚õî [ERROR] .automation/test/vbdotnet/vbdotnet_bad_2.vb
     .automation/test/vbdotnet/vbdotnet_bad_1.vb(4,4): error WHITESPACE: Fix whitespace formatting. Insert '\s'. [.automation/test/vbdotnet/vb_projecty.vbproj]
     .automation/test/vbdotnet/vbdotnet_bad_1.vb(4,20): error WHITESPACE: Fix whitespace formatting. Delete 2 characters. [.automation/test/vbdotnet/vb_projecty.vbproj]
     .automation/test/vbdotnet/vbdotnet_bad_1.vb(5,7): error WHITESPACE: Fix whitespace formatting. Insert '\s\s'. [.automation/test/vbdotnet/vb_projecty.vbproj]
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 8ed4a05..bb315c6 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -3501,7 +3501,7 @@ _Note: MegaLinter 6.9.0 release has been cancelled: it was fine but the docker i
   - Cleanup unused legacy from Super-Linter

 - Reports
-  - Better icons for Console, GitHub Comment and Text reporters: ‚úÖ ‚ùå
+  - Better icons for Console, GitHub Comment and Text reporters: ‚úÖ ‚õî

 - Documentation
   - Add Install button for VSCode IDE extensions when available
diff --git a/megalinter/MegaLinter.py b/megalinter/MegaLinter.py
index 2f374c6..944e059 100644
--- a/megalinter/MegaLinter.py
+++ b/megalinter/MegaLinter.py
@@ -862,7 +862,7 @@ class Megalinter:
             config.delete(self.request_id)
             self.check_updated_sources_failure()
         else:
-            logging.error(c.red("‚ùå Error(s) have been found during linting"))
+            logging.error(c.red("‚õî Error(s) have been found during linting"))
             logging.warning(
                 "To disable linters or customize their checks, you can use a .mega-linter.yml file "
                 "at the root of your repository"
@@ -881,7 +881,7 @@ class Megalinter:
         if self.has_updated_sources > 0 and self.fail_if_updated_sources is True:
             logging.error(
                 c.red(
-                    "‚ùå Sources has been updated by linter autofixes, and FAIL_IF_UPDATED_SOURCES has been set to true"
+                    "‚õî Sources has been updated by linter autofixes, and FAIL_IF_UPDATED_SOURCES has been set to true"
                 )
             )
             sys.exit(1)
diff --git a/megalinter/descriptors/all_flavors.json b/megalinter/descriptors/all_flavors.json
index 1f5bf8d..3a82ca3 100644
--- a/megalinter/descriptors/all_flavors.json
+++ b/megalinter/descriptors/all_flavors.json
@@ -1,4 +1,41 @@
 {
+  "cit": {
+      "descriptors": [
+          "GIT"
+      ],
+      "label": "Control it! Comprehensive solution for C++ projects",
+      "linters": [
+          "BASH_EXEC",
+          "BASH_SHELLCHECK",
+          "BASH_SHFMT",
+          "CMAKE_CMAKE_FORMAT",
+          "CMAKE_CMAKE_LINT",
+          "REPOSITORY_GIT_DIFF",
+          "GIT_GIT_SIZER",
+          "GIT_CONFORM",
+          "GIT_COMMITLINT",
+          "GIT_GITLINT",
+          "GIT_GIT_LINT",
+          "GIT_GIT_SPELL",
+          "NIX_NIX_LINTER",
+          "NIX_NIXPKGS_FMT_WRAPPER",
+          "SPELL_CSPELL",
+          "SPELL_CODESPELL",
+          "LICENSE_REUSE",
+          "LS_LS_SPELL",
+          "LS_LS_LINT",
+          "CPP_CLANG_TIDY",
+          "CPP_CPPCHECK",
+          "CPP_CPPLINT",
+          "CPP_CLANG_FORMAT_16",
+          "YAML_PRETTIER",
+          "YAML_YAMLLINT",
+          "MARKDOWN_REMARK_LINT",
+          "MARKDOWN_MDL",
+          "MARKDOWN_TEXTLINT",
+          "GIT_WHITESPACE_FORMAT"
+      ]
+  },
     "c_cpp": {
         "descriptors": [
             "BASH",
diff --git a/megalinter/descriptors/markdown.megalinter-descriptor.yml b/megalinter/descriptors/markdown.megalinter-descriptor.yml
index 31518b7..2247e3e 100644
--- a/megalinter/descriptors/markdown.megalinter-descriptor.yml
+++ b/megalinter/descriptors/markdown.megalinter-descriptor.yml
@@ -55,7 +55,6 @@ linters:
           url: https://marketplace.visualstudio.com/items/DavidAnson.vscode-markdownlint
   # remark-lint
   - linter_name: remark-lint
-    disabled: true
     is_formatter: true
     activation_rules:
       - type: variable
diff --git a/megalinter/descriptors/schemas/megalinter-descriptor.jsonschema.json b/megalinter/descriptors/schemas/megalinter-descriptor.jsonschema.json
index c62ff23..6387a0c 100644
--- a/megalinter/descriptors/schemas/megalinter-descriptor.jsonschema.json
+++ b/megalinter/descriptors/schemas/megalinter-descriptor.jsonschema.json
@@ -41,6 +41,7 @@
       "enum": [
         "all_flavors",
         "all",
+        "cit",
         "ci_light",
         "cupcake",
         "c_cpp",
diff --git a/megalinter/flavor_factory.py b/megalinter/flavor_factory.py
index fbef15e..09fe73e 100644
--- a/megalinter/flavor_factory.py
+++ b/megalinter/flavor_factory.py
@@ -41,6 +41,7 @@ def list_flavor_linters(flavor_id):
 def list_megalinter_flavors():
     flavors = {
         "all": {"label": "MegaLinter for any type of project"},
+        "cit": {"label": "Control it! Comprehensive solution for C++ project"},
         "ci_light": {
             "label": "Optimized for CI items (Dockerfile, Jenkinsfile, JSON/YAML schemas, XML)"
         },
diff --git a/megalinter/reporters/ConsoleLinterReporter.py b/megalinter/reporters/ConsoleLinterReporter.py
index e1b56ae..d0da07c 100644
--- a/megalinter/reporters/ConsoleLinterReporter.py
+++ b/megalinter/reporters/ConsoleLinterReporter.py
@@ -67,7 +67,7 @@ class ConsoleLinterReporter(Reporter):
                 log_section_start(
                     f"processed-{self.master.name}",
                     c.red(
-                        f"‚ùå {base_phrase}: Found {total_errors} error(s) - ({elapse})"
+                        f"‚õî {base_phrase}: Found {total_errors} error(s) - ({elapse})"
                     ),
                 )
             )
@@ -75,7 +75,7 @@ class ConsoleLinterReporter(Reporter):
             logging.error(
                 log_section_start(
                     f"processed-{self.master.name}",
-                    f"‚ùå There is a MegaLinter issue, please report it: {self.master.return_code}"
+                    f"‚õî There is a MegaLinter issue, please report it: {self.master.return_code}"
                     + " / {self.master.status}",
                 )
             )
diff --git a/megalinter/reporters/ConsoleReporter.py b/megalinter/reporters/ConsoleReporter.py
index 3b91311..418cd7f 100644
--- a/megalinter/reporters/ConsoleReporter.py
+++ b/megalinter/reporters/ConsoleReporter.py
@@ -72,7 +72,7 @@ class ConsoleReporter(Reporter):
                     if linter.status == "success" and linter.return_code == 0
                     else "‚ö†Ô∏è"
                     if linter.status != "success" and linter.return_code == 0
-                    else "‚ùå"
+                    else "‚õî"
                 )
                 errors = str(linter.total_number_errors)
                 if linter.cli_lint_mode == "project":
diff --git a/megalinter/reporters/TextReporter.py b/megalinter/reporters/TextReporter.py
index 9849823..e464b9a 100644
--- a/megalinter/reporters/TextReporter.py
+++ b/megalinter/reporters/TextReporter.py
@@ -59,7 +59,7 @@ class TextReporter(Reporter):
         if self.master.cli_lint_mode == "file":
             for file_result in self.master.files_lint_results:
                 status = (
-                    "‚úÖ [SUCCESS]" if file_result["status_code"] == 0 else "‚ùå [ERROR]"
+                    "‚úÖ [SUCCESS]" if file_result["status_code"] == 0 else "‚õî [ERROR]"
                 )
                 if file_result["file"] is not None:
                     file_nm = utils.normalize_log_string(file_result["file"])
@@ -78,7 +78,7 @@ class TextReporter(Reporter):
         # Bulk output as linter has run all project or files in one call
         elif self.master.cli_lint_mode in ["project", "list_of_files"]:
             workspace_nm = utils.normalize_log_string(self.master.workspace)
-            status = "‚úÖ [SUCCESS]" if self.master.status == "success" else "‚ùå [ERROR]"
+            status = "‚úÖ [SUCCESS]" if self.master.status == "success" else "‚õî [ERROR]"
             text_report_lines += [f"{status} for workspace {workspace_nm}"]
             if self.report_type == "detailed" or self.master.status != "success":
                 stdout = utils.normalize_log_string(
diff --git a/megalinter/utils_reporter.py b/megalinter/utils_reporter.py
index a0caed7..afcacf5 100644
--- a/megalinter/utils_reporter.py
+++ b/megalinter/utils_reporter.py
@@ -29,7 +29,7 @@ def build_markdown_summary(reporter_self, action_run_url):
                 if linter.status == "success" and linter.return_code == 0
                 else "‚ö†Ô∏è"
                 if linter.status != "success" and linter.return_code == 0
-                else "‚ùå"
+                else "‚õî"
             )
             first_col = f"{status} {linter.descriptor_id}"
             lang_lower = linter.descriptor_id.lower()
@@ -76,7 +76,7 @@ def build_markdown_summary(reporter_self, action_run_url):
         and reporter_self.master.status == "success"
         else "‚ö†Ô∏è"
         if reporter_self.master.status == "warning"
-        else "‚ùå"
+        else "‚õî"
     )
     status_with_href = (
         status
