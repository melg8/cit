diff --git a/include/meta/meta.hpp b/include/meta/meta.hpp
index 1372703e7..53d607221 100644
--- a/include/meta/meta.hpp
+++ b/include/meta/meta.hpp
@@ -15,6 +15,7 @@
 #ifndef META_HPP
 #define META_HPP

+#include <cassert>
 #include <cstddef>
 #include <initializer_list>
 #include <meta/meta_fwd.hpp>
@@ -406,9 +407,8 @@ namespace meta
         template <typename T>
         constexpr std::size_t range_distance_(T begin, T end)
         {
-            return begin <= end ? static_cast<std::size_t>(end - begin)
-                                : throw "The start of the integer_sequence must not be "
-                                        "greater than the end";
+            assert(begin <= end && "The start of the integer_sequence must not be greater than the end");
+            return static_cast<std::size_t>(end - begin);
         }

         template <std::size_t End, typename State, indices_strategy_ Status_>
diff --git a/include/range/v3/detail/variant.hpp b/include/range/v3/detail/variant.hpp
index 14513c08a..fc80aa4cc 100644
--- a/include/range/v3/detail/variant.hpp
+++ b/include/range/v3/detail/variant.hpp
@@ -13,6 +13,7 @@
 #ifndef RANGES_V3_DETAIL_VARIANT_HPP
 #define RANGES_V3_DETAIL_VARIANT_HPP

+#include <cassert>
 #include <iterator>
 #include <memory>
 #include <new>
@@ -452,7 +453,7 @@ namespace ranges
             template<typename U, std::size_t M>
             [[noreturn]] meta::if_c<M != N> operator()(indexed_element<U, M>) const
             {
-                throw bad_variant_access("bad variant access");
+                assert(false && "bad variant access");
             }
             template<typename U>
             void operator()(indexed_element<U, N> t) const noexcept
diff --git a/include/range/v3/range/operations.hpp b/include/range/v3/range/operations.hpp
index ef533b741..573ea136f 100644
--- a/include/range/v3/range/operations.hpp
+++ b/include/range/v3/range/operations.hpp
@@ -15,6 +15,7 @@
 #ifndef RANGES_V3_RANGE_OPERATIONS_HPP
 #define RANGES_V3_RANGE_OPERATIONS_HPP

+#include <cassert>
 #include <stdexcept>

 #include <range/v3/range_fwd.hpp>
@@ -50,8 +51,7 @@ namespace ranges
         template<typename Rng>
         static constexpr void check_throw(Rng && rng, range_difference_t<Rng> n)
         {
-            (n < 0 || n >= ranges::distance(rng)) ? throw std::out_of_range("ranges::at")
-                                                  : void(0);
+            assert(!(n < 0 || n >= ranges::distance(rng)) && "ranges::at: index out of range");
         }
     };

diff --git a/include/range/v3/utility/any.hpp b/include/range/v3/utility/any.hpp
index 0d2889264..d91dfb9b2 100644
--- a/include/range/v3/utility/any.hpp
+++ b/include/range/v3/utility/any.hpp
@@ -14,6 +14,7 @@
 #ifndef RANGES_V3_UTILITY_ANY_HPP
 #define RANGES_V3_UTILITY_ANY_HPP

+#include <cassert>
 #include <memory>
 #include <type_traits>
 #include <typeinfo>
@@ -183,8 +184,7 @@ namespace ranges
     template<typename T>
     meta::if_c<std::is_reference<T>() || copyable<T>, T> any_cast(any & x)
     {
-        if(x.type() != typeid(detail::decay_t<T>))
-            throw bad_any_cast{};
+        assert(x.type() == typeid(detail::decay_t<T>) && "bad any cast")
         return static_cast<any::impl<detail::decay_t<T>> *>(x.ptr_.get())->get();
     }

@@ -192,8 +192,7 @@ namespace ranges
     template<typename T>
     meta::if_c<std::is_reference<T>() || copyable<T>, T> any_cast(any const & x)
     {
-        if(x.type() != typeid(detail::decay_t<T>))
-            throw bad_any_cast{};
+        assert(x.type() == typeid(detail::decay_t<T>) && "bad any cast")
         return static_cast<any::impl<detail::decay_t<T>> const *>(x.ptr_.get())->get();
     }

@@ -201,8 +200,7 @@ namespace ranges
     template<typename T>
     meta::if_c<std::is_reference<T>() || copyable<T>, T> any_cast(any && x)
     {
-        if(x.type() != typeid(detail::decay_t<T>))
-            throw bad_any_cast{};
+        assert(x.type() == typeid(detail::decay_t<T>) && "bad any cast")
         return static_cast<any::impl<detail::decay_t<T>> *>(x.ptr_.get())->get();
     }

diff --git a/include/range/v3/utility/optional.hpp b/include/range/v3/utility/optional.hpp
index 29895b3eb..54e74983c 100644
--- a/include/range/v3/utility/optional.hpp
+++ b/include/range/v3/utility/optional.hpp
@@ -14,6 +14,7 @@
 #ifndef RANGES_V3_UTILITY_OPTIONAL_HPP
 #define RANGES_V3_UTILITY_OPTIONAL_HPP

+#include <cassert>
 #include <exception>
 #include <initializer_list>
 #include <memory>
@@ -76,7 +77,7 @@ namespace ranges
         template<typename = void>
         [[noreturn]] bool throw_bad_optional_access()
         {
-            throw bad_optional_access{};
+            assert(false && "bad optional access");
         }

         namespace optional_adl
diff --git a/include/range/v3/view/interface.hpp b/include/range/v3/view/interface.hpp
index aee727d5e..dfad4426b 100644
--- a/include/range/v3/view/interface.hpp
+++ b/include/range/v3/view/interface.hpp
@@ -13,6 +13,7 @@
 #ifndef RANGES_V3_VIEW_INTERFACE_HPP
 #define RANGES_V3_VIEW_INTERFACE_HPP

+#include <cassert>
 #include <iosfwd>

 #include <meta/meta.hpp>
@@ -309,10 +310,7 @@ namespace ranges
         constexpr range_reference_t<D<True>> at(range_difference_t<D<True>> n)
         {
             using size_type = range_size_t<Derived>;
-            if(n < 0 || size_type(n) >= ranges::size(derived()))
-            {
-                throw std::out_of_range("view_interface::at");
-            }
+            assert(!(n < 0 || size_type(n) >= ranges::size(derived())) && "view_interface::at: index out of range");
             return derived().begin()[n];
         }
         /// \overload
@@ -322,10 +320,7 @@ namespace ranges
         constexpr range_reference_t<D<True> const> at(range_difference_t<D<True>> n) const
         {
             using size_type = range_size_t<Derived const>;
-            if(n < 0 || size_type(n) >= ranges::size(derived()))
-            {
-                throw std::out_of_range("view_interface::at");
-            }
+            assert(!(n < 0 || size_type(n) >= ranges::size(derived())) && "view_interface::at: index out of range");
             return derived().begin()[n];
         }
         /// Python-ic slicing:
diff --git a/test/array.hpp b/test/array.hpp
index 3a7bd4c48..16bfa6adc 100644
--- a/test/array.hpp
+++ b/test/array.hpp
@@ -24,6 +24,7 @@
 #ifndef RANGES_V3_TEST_ARRAY_HPP
 #define RANGES_V3_TEST_ARRAY_HPP

+#include <cassert>
 #include <stdexcept>
 #include <range/v3/range_fwd.hpp>
 #include <range/v3/iterator/operations.hpp>
@@ -152,14 +153,12 @@ namespace test {
         }
         constexpr /*c++14*/ reference at(size_type n)
         {
-            if (n >= N)
-                throw std::out_of_range("array::at");
+            assert(n < N && "array::at: index out of range");
             return elems_[n];
         }
         constexpr /*c++14*/ const_reference at(size_type n) const
         {
-            if (n >= N)
-                throw std::out_of_range("array::at");
+            assert(n < N && "array::at: index out of range");
             return elems_[n];
         }
         constexpr /*c++14*/ reference front()
