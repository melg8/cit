<?xml version="1.0"?>
<!--
SPDX-FileCopyrightText: Â© 2022 Melg Eight <public.melg8@gmail.com>

SPDX-License-Identifier: MIT
-->
<def format="2">
  <!-- see https://github.com/google/googletest/blob/main/docs/primer.md -->
  <define name="DOCTEST_CAT_IMPL(s1, s2)" value="s1##s2"/>
  <define name="DOCTEST_CAT(s1, s2)" value="DOCTEST_CAT_IMPL(s1, s2)"/>
  <define name="DOCTEST_ANONYMOUS(x)" value="
  #ifdef __COUNTER__ // not standard and may be missing for some compilers
  #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __COUNTER__)
  #else // __COUNTER__
  #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __LINE__)
  #endif // __COUNTER__
  "/>
  <define name="DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, decorators)" value="static void f(); DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators) static void f()"/>
  <define name="DOCTEST_TEST_CASE(decorators)" value="DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)"/>
  <define name="SCENARIO(name)" value="DOCTEST_TEST_CASE(name)"/>
  <define name="SUBCASE(name)" value="if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED = doctest::detail::Subcase(name, __FILE__, __LINE__))"/>
  <define name="GIVEN(name)" value="if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED = doctest::detail::Subcase(name, __FILE__, __LINE__))"/>
  <define name="WHEN(name)" value="if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED = doctest::detail::Subcase(name, __FILE__, __LINE__))"/>
  <define name="THEN(name)" value="if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED = doctest::detail::Subcase(name, __FILE__, __LINE__))"/>
  <define name="DOCTEST_BINARY_ASSERT(assert_type, comp, ...)" value="
  [&] {                                                                                          \
      doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \
                                                 __LINE__, #__VA_ARGS__);                        \
      DOCTEST_WRAP_IN_TRY(                                                                       \
              DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \
                      __VA_ARGS__))                                                              \
      DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \
  }()
  "/>
  <define name="DOCTEST_CHECK_EQ(...)" value="DOCTEST_BINARY_ASSERT(DT_CHECK_EQ, eq, __VA_ARGS__)"/>
  <define name="CHECK_EQ(...)" value="DOCTEST_CHECK_EQ(__VA_ARGS__)"/>
  <define name="DOCTEST_REGISTER_FUNCTION(global_prefix, f, decorators)" value="
      global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_),               \
            doctest::detail::regTest(                                                              \
                    doctest::detail::TestCase(                                                     \
                            f, __FILE__, __LINE__,                                                 \
                            doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \
                    decorators))
  "/>
</def>
