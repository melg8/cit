# SPDX-FileCopyrightText: Â© 2022 Melg Eight <public.melg8@gmail.com>
#
# SPDX-License-Identifier: MIT

---
name: Checks
# yamllint disable-line rule:truthy
on: [push, pull_request]
jobs:
  build_docker:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            ci_nix:
              - 'ci/nix/**'
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - if: steps.filter.outputs.ci_nix == 'true'
        run: just docker-build
  build_docker_from_docker:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            ci_nix:
              - 'ci/nix/**'
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - if: steps.filter.outputs.ci_nix == 'true'
        run: |
          sudo chmod 777 "$(pwd)"
          sudo chmod -R 777 "$(pwd)/.git"
          sudo chown -R 1000:100 "$(pwd)"
          just docker-run "just docker-build"
      - uses: docker://melg8/cit:0.0.7
  lint_all_from_nix_shell:
    runs-on: ubuntu-20.04
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            ci_nix:
              - 'ci/nix/**'
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - if: steps.filter.outputs.ci_nix == 'true'
        run: |
          nix-shell --run ./ci/checks/all.sh
  lint_all_from_nix_shell_v2:
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            ci_nix:
              - 'ci/nix/**'
      - uses: cachix/install-nix-action@v16
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - if: steps.filter.outputs.ci_nix == 'true'
        run: |
          nix-shell --run "just lint-all"
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: MegaLinter reports
          path: |
            report
            mega-linter.log
  lint_all_in_docker_from_nix_shell:
    runs-on: ubuntu-20.04
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            ci_nix:
              - 'ci/nix/**'
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - if: steps.filter.outputs.ci_nix == 'true'
        run: |
          sudo chmod 777 "$(pwd)"
          sudo chmod -R 777 "$(pwd)/.git"
          sudo chown -R 1000:100 "$(pwd)"
          just docker-run-nix-shell ./ci/checks/all.sh
      - uses: docker://melg8/cit:0.0.7
  lint_all_in_docker_from_nix_shell_v2:
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            ci_nix:
              - 'ci/nix/**'
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - if: steps.filter.outputs.ci_nix == 'true'
        run: |
          sudo chmod 777 "$(pwd)"
          sudo chmod -R 777 "$(pwd)/.git"
          sudo chown -R 1000:100 "$(pwd)"
          just docker-run-nix-shell "just lint-all"
      - uses: docker://melg8/cit:0.0.7
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: MegaLinter reports
          path: |
            report
            mega-linter.log
  lint_all_in_docker:
    runs-on: ubuntu-20.04
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - run: |
          sudo chmod 777 "$(pwd)"
          sudo chmod -R 777 "$(pwd)/.git"
          sudo chown -R 1000:100 "$(pwd)"
          just docker-run ./ci/checks/all.sh
      - uses: docker://melg8/cit:0.0.7
  lint_all_in_docker_v2:
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - run: |
          sudo chmod 777 "$(pwd)"
          sudo chmod -R 777 "$(pwd)/.git"
          sudo chown -R 1000:100 "$(pwd)"
          just docker-run "just lint-all"
      - uses: docker://melg8/cit:0.0.7
      - name: Archive production artifacts
        if: ${{ success() }} || ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: MegaLinter reports
          path: |
            report
            mega-linter.log
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: errors # The branch the action should deploy to.
          folder: report/errors # The folder the action should deploy.
  build_gcc:
    runs-on: ubuntu-20.04
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - uses: docker://melg8/cit:0.0.7
      - run: |
          sudo chmod 777 "$(pwd)"
          sudo chmod -R 777 "$(pwd)/.git"
          sudo chown -R 1000:100 "$(pwd)"
          just docker-run "just build-gcc"
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./
          env_vars: OS
          fail_ci_if_error: true
          flags: gcc_unit_tests
          verbose: true
  build_clang:
    runs-on: ubuntu-20.04
    needs: build_docker
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: taiki-e/install-action@v1
        with:
          tool: just
      - uses: docker://melg8/cit:0.0.7
      - run: |
          sudo chmod 777 "$(pwd)"
          sudo chmod -R 777 "$(pwd)/.git"
          sudo chown -R 1000:100 "$(pwd)"
          just docker-run "just build-clang"
      - uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./
          env_vars: OS
          fail_ci_if_error: true
          flags: clang_unit_tests
          verbose: true
